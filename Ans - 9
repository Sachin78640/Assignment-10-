const express = require('express');

// Create an Express app
const app = express();

// Body parser middleware to parse JSON requests
app.use(express.json());

// Sample initial todos data
let todos = [];

// Endpoint to get all todos
app.get('/', (req, res) => {
  res.json(todos);
});

// Middleware to validate input for creating a todo
const validateTodoInput = (req, res, next) => {
  const { task } = req.body;
  if (!task) {
    return res.status(400).json({ message: 'Validation failed. Task is mandatory.' });
  }
  next();
};

// Endpoint to create a todo
app.post('/add', validateTodoInput, (req, res) => {
  const { task } = req.body;
  const newTodo = { id: todos.length + 1, task };
  todos.push(newTodo);
  res.json({ message: 'Todo created successfully.', data: todos });
});

// Endpoint to update a todo
app.put('/update/:id', (req, res) => {
  const todoId = parseInt(req.params.id);
  const { task } = req.body;

  todos = todos.map(todo => {
    if (todo.id === todoId) {
      return { ...todo, task };
    }
    return todo;
  });

  res.json({ message: 'Todo updated successfully.', data: todos });
});

// Endpoint to delete a todo
app.delete('/delete/:id', (req, res) => {
  const todoId = parseInt(req.params.id);

  todos = todos.filter(todo => todo.id !== todoId);

  res.json({ message: 'Todo deleted successfully.', data: todos });
});

// Start the server
const port = 3000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


In this code, we're using Express to create an application. We have defined the following endpoints:

The '/' endpoint responds with all the todos stored in the todos array.

The /add endpoint is responsible for creating a new todo. It uses the validateTodoInput middleware to ensure that the user provides a task as input. If the validation fails, it sends a response with a validation failure message. Otherwise, it adds the new todo to the todos array and sends a response with the updated todos.

The /update/:id endpoint allows users to update a specific todo identified by its id. It updates the task of the corresponding todo and sends a response with the updated todos.

The /delete/:id endpoint allows users to delete a specific todo identified by its id. It removes the corresponding todo from the todos array and sends a response with the updated todos.

Please note that this is a basic example, and you may want to consider additional validation, error handling, and data persistence mechanisms in a real-world scenario.
